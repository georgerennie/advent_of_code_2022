; This was a failed first attempt to solve this problem using the string theory

(set-option :produce-models true)
(set-logic ALL)

; Part 1

(define-fun common-char ((s String) (c String)) Bool
	(let ((half-len (div (str.len s) 2)))
	(let ((head (str.substr s 0 half-len))
		  (tail (str.substr s half-len (str.len s))))
	(and
		(= (str.len c) 1)
		(str.contains head c)
		(str.contains tail c)
	)))
)

; Get priority of character
(define-fun priority-char ((s String)) Int
	(let ((ord (str.to-code s)))
	(- ord (ite (>= ord 97) 96 38)))
)

; Get priority of string by splitting etc. This should be asserted
(define-fun priority-str ((s String) (p Int)) Bool
	(exists ((common String))
	(and
		(common-char s common)
		(= p (priority-char common))
	))
)

{% for line in input_lines %}
(declare-const priority-{{ loop.index }} Int)
{%- endfor %}

(assert
	(and
		{%- for line in input_lines %}
		(priority-str "{{line}}" priority-{{ loop.index }})
		{%- endfor %}
	)
)

(define-fun part-1 () Int
	(+{%- for line in input_lines %} priority-{{ loop.index }}{%- endfor %})
)

(check-sat)
(get-value (part-1))
